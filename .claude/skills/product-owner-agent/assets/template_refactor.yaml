change_request:
  id: CR-{number}
  type: refactor
  title: "{Refactoring title}"
  priority: medium  # high|medium|low

  description: |
    {What needs to be refactored and why}

    Current State: {Description of current implementation}

    Desired State: {Description of desired implementation}

    Motivation: {Why this refactoring is needed}

  business_value: |
    {Benefits of refactoring}
    - Maintainability: {how it improves maintainability}
    - Performance: {performance improvements if any}
    - Code quality: {quality improvements}
    - Developer velocity: {how it helps future development}

  research_findings:
    - "{Current pain points}"
    - "{Best practices for this pattern}"
    - "{Similar refactorings in codebase}"
    - "{Tools/libraries that could help}"

  scope:
    files_affected:
      - "{file 1}"
      - "{file 2}"
    modules_affected:
      - "{module 1}"
      - "{module 2}"
    estimated_loc_changed: {number}

  technical_debt_addressed:
    - "{Debt item 1}"
    - "{Debt item 2}"

tasks:
  - id: TASK-{number}
    title: "Create refactoring plan and backup"
    type: fullstack
    agent: backend
    complexity: S
    priority: high
    dependencies: []

    description: |
      Document the refactoring approach and create backups.

    acceptance_criteria:
      - "Refactoring approach documented"
      - "Branch created from stable state"
      - "Affected areas identified"
      - "Rollback plan defined"

    technical_notes: |
      - Review existing tests
      - Identify dependencies
      - Plan incremental changes

  - id: TASK-{number}
    title: "Refactor {component/module}"
    type: backend
    agent: backend
    complexity: L
    priority: high
    dependencies: [TASK-{previous}]

    description: |
      Implement the refactoring changes.

    acceptance_criteria:
      - "Code refactored according to plan"
      - "All existing tests still passing"
      - "Code coverage maintained or improved"
      - "No functionality changed"

    technical_notes: |
      Refactoring steps:
      1. {Step 1}
      2. {Step 2}
      3. {Step 3}

      Patterns to apply:
      - {Pattern 1}
      - {Pattern 2}

    validation_checklist:
      - "[ ] All tests passing"
      - "[ ] No regressions identified"
      - "[ ] Code review completed"
      - "[ ] Performance not degraded"
      - "[ ] Documentation updated"

  - id: TASK-{number}
    title: "Update tests and documentation"
    type: fullstack
    agent: backend
    complexity: M
    priority: high
    dependencies: [TASK-{previous}]

    description: |
      Update tests and documentation to reflect refactored code.

    acceptance_criteria:
      - "Tests updated if needed"
      - "Documentation reflects new structure"
      - "Code comments updated"
      - "README updated if applicable"

    technical_notes: |
      - Update inline comments
      - Update API documentation
      - Update architectural docs

estimated_effort:
  total_story_points: {sum}
  estimated_days: {estimate}

risks:
  - risk: "Breaking existing functionality"
    mitigation: "Comprehensive testing, incremental changes, rollback plan"
    probability: low
    impact: high

  - risk: "Merge conflicts with ongoing work"
    mitigation: "Coordinate with team, frequent rebasing"
    probability: medium
    impact: medium

success_metrics:
  - "All tests passing"
  - "Code complexity reduced by {percentage}"
  - "Code coverage maintained or improved"
  - "No production issues post-deployment"
  - "Team velocity improved in future sprints"

rollback_plan: |
  {How to revert changes if issues arise}
  - Keep original branch available
  - Deploy rollback in {timeframe}
  - Communication plan for stakeholders
